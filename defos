#!/usr/bin/env bash
#       .___      _____
#     __| _/_____/ ____\____  ______   Nehar Tale DeFc0n
#    / __ |/ __ \   __\/  _ \/  ___/  https://www.github.com/xDeFc0nx/
#   / /_/ \  ___/|  | (  <_> )___ \
#   \____ |\___  >__|  \____/____  >
#        \/    \/                \/
# NAME: DEFOS
# DESC: An installation and deployment script for DeFc0n's Xmonad desktop.
# WARNING: Run this script at your own risk.
# DEPENDENCIES: dialog
yes | sudo pacman -Syu
if [ "$(id -u)" = 0 ]; then
    echo "##################################################################"
    echo "This script MUST NOT be run as root user since it makes changes"
    echo "to the \$HOME directory of the \$USER executing this script."
    echo "The \$HOME directory of the root user is, of course, '/root'."
    echo "We don't want to mess around in there. So run this script as a"
    echo "normal user. You will be asked for a sudo password when necessary."
    echo "##################################################################"
    exit 1
fi

error() {
    clear
    printf "ERROR:\\n%s\\n" "$1" >&2
    exit 1
}

echo "################################################################"
echo "## Syncing the repos and installing 'dialog' if not installed ##"
echo "################################################################"
sudo pacman --noconfirm --needed -Syu dialog || error "Error syncing the repos."

welcome() {
    dialog --colors --title "\Z7\ZbInstalling DEFOS!" --msgbox "\Z4This is a script that will install what I sarcastically call DEFOS (DeFc0n's operating system).  It's really just an installation script for those that want to try out my XMonad desktop.  We will add DEFOS repos to Pacman and install the XMonad tiling window manager, the Xmobar panel, the Alacritty terminal, the Fish shell, Doom Emacs and many other essential programs needed to make my dotfiles work correctly.\\n\\n-DeFc0n (Nehar tale,)" 16 60

    dialog --colors --title "\Z7\ZbStay near your computer!" --yes-label "Continue" --no-label "Exit" --yesno "\Z4This script is not allowed to be run as root, but you will be asked to enter your sudo password at various points during this installation. This is to give PACMAN the necessary permissions to install the software.  So stay near the computer." 8 60
}

welcome || error "User choose to exit."

lastchance() {
    dialog --colors --title "\Z7\ZbInstalling DEFOS!" --msgbox "\Z4WARNING! The DEFOS installation script is currently in public beta testing. There are almost certainly errors in it; therefore, it is strongly recommended that you not install this on production machines. It is recommended that you try this out in either a virtual machine or on a test machine." 16 60

    dialog --colors --title "\Z7\ZbAre You Sure You Want To Do This?" --yes-label "Begin Installation" --no-label "Exit" --yesno "\Z4Shall we begin installing DEFOS?" 8 60 || {
        clear
        exit 1
    }
}
# Let's install each package listed in the pkglist.txt file.
sudo pacman --needed --ask 4 -Sy - <pkglist.txt
yay -S tlauncher betterdiscordctl --noconfirm

cd ~
git clone https://github.com/xDeFc0nx/.dotfiles
cd .dotfiles
yes | cp -r .bashrc $HOME
yes | cp -r .zshrc $HOME
yes | cp -r .xmonad $HOME
yes | cp -r .config $HOME
yes | cp -r scripts $HOME
yes | cp -r wallpapers $HOME
xmonad_recompile() {
    echo "########################"
    echo "## Recompiling XMonad ##"
    echo "########################"
    xmonad --recompile
}

xmonad_recompile || error "Error recompiling Xmonad!"

xmonadctl_compile() {
    echo "####################################"
    echo "## Compiling the xmonadctl script ##"
    echo "####################################"
    ghc -dynamic "$HOME"/.xmonad/xmonadctl.hs
}

xmonadctl_compile || error "Error compiling the xmonadctl script!"

PS3='Set default user shell (enter number): '
shells=("fish" "bash" "zsh" "quit")
select choice in "${shells[@]}"; do
    case $choice in
    fish | bash | zsh)
        sudo chsh $USER -s "/bin/$choice" &&
            echo -e "$choice has been set as your default USER shell. \
                    \nLogging out is required for this take effect."
        break
        ;;
    quit)
        echo "User quit without changing shell."
        break
        ;;
    *)
        echo "invalid option $REPLY"
        ;;
    esac
done

# # Disable the current login manager
sudo systemctl disable $(grep '/usr/s\?bin' /etc/systemd/system/display-manager.service | awk -F / '{print $NF}') || echo "Cannot disable current display manager."
# Enable sddm as login manager
sudo systemctl enable sddm
echo "###################################"
echo "## Enable sddm as login manager. ##"
echo "###################################"

## Make multicolor-sddm-theme the default sddm theme ##
#  #This is the sddm system configuration file.
[ -f "/usr/lib/sddm/sddm.conf.d/default.conf" ] &&
    sudo cp /usr/lib/sddm/sddm.conf.d/default.conf /usr/lib/sddm/sddm.conf.d/default.conf.backup &&
    sudo sed -i 's/^Current=*.*/Current=multicolor-sddm-theme/g' /usr/lib/sddm/sddm.conf.d/default.conf

# This is the sddm local configuration file.
[ -f "/etc/sddm.conf" ] &&
    sudo cp /etc/sddm.conf /etc/sddm.conf.backup &&
    sudo sed -i 's/^Current=*.*/Current=multicolor-sddm-theme/g' /etc/sddm.conf

# # Create a local configuration file if it doesn't exist.
# # Standard Arch Linux does not create this file by default.
# [ ! -f "/etc/sddm.conf" ] && \
#     sudo cp /usr/lib/sddm/sddm.conf.d/default.conf /etc/sddm.conf || echo "Default sddm system config file is not found."

# # ArcoLinux B Awesome uses this config location.
# [ -f "/etc/sddm.conf.d/kde_settings.conf" ] && \
#     sudo cp /etc/sddm.conf.d/kde_settings.conf /etc/sddm.conf.d/kde_settings.backup && \
#     sudo sed -i 's/^Current=*.*/Current=multicolor-sddm-theme/g' /etc/sddm.conf.d/kde_settings.conf

# Enable virt manager
echo "###################################"
echo "## Enable Virt manager. ##"
echo "###################################"
sudo systemctl enable libvirtd.service
sudo systemctl start libvirtd.service
sudo usermod -a -G libvirt $USER

echo "##############################"
echo "## DEFOS has been installed! ##"
echo "##############################"

while true; do
    read -p "Do you want to reboot to get your DeFoS? [Y/n] " yn
    case $yn in
    [Yy]*) reboot ;;
    [Nn]*) break ;;
    "") reboot ;;
    *) echo "Please answer yes or no." ;;
    esac
done
