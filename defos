#!/usr/bin/env bash
#       .___      _____
#     __| _/_____/ ____\____  ______   Nehar Tale DeFc0n
#    / __ |/ __ \   __\/  _ \/  ___/  https://www.github.com/xDeFc0nx/
#   / /_/ \  ___/|  | (  <_> )___ \
#   \____ |\___  >__|  \____/____  >
#        \/    \/                \/
# NAME: DEFOS
# DESC: An installation and deployment script for DeFc0n's Xmonad desktop.
# WARNING: Run this script at your own risk.

while true; do
    read -p "$(tput setaf 1) The script will require user interaction, WARNIGN RUN THIS AT YOUR OWN RISKT, Continue? " yn
    case $yn in
    [Yy]*)

        break
        ;;
    [Nn]*) exit ;;
    *) echo "Please answer yes or no." ;;
    esac
done
spinner=('\' '|' '/' '-')
kills() {
    spin &
    pid=$!

    for i in $(seq 1 5); do
        sleep 1
    done
    kill $pid
}
spin() {
    echo -ne " "
    while true; do
        for s in ${spinner[@]}; do
            echo -ne "\b${s}"
            sleep 0.2
        done
    done
}

echo -ne "$(tput setaf 1)  Updating the system:"
kills
sleep 1
yes | sudo pacman -Syu
sleep 5

echo -ne "$(tput setaf 1) Installing each package listed in the pkglist.txt file. "
kills
sleep 1
# Let's install each package listed in the pkglist.txt file.
sudo pacman --needed --ask 4 -Sy - <pkglist.txt
yay -S tlauncher betterdiscordctl --noconfirm

cd ~
git clone https://github.com/xDeFc0nx/.dotfiles
cd .dotfiles
yes | cp -r .bashrc $HOME
yes | cp -r .zshrc $HOME
yes | cp -r .xmonad $HOME
yes | cp -r .config $HOME
yes | cp -r scripts $HOME
yes | cp -r wallpapers $HOME
xmonad_recompile() {
    echo "########################"
    echo "## Recompiling XMonad ##"
    echo "########################"
    xmonad --recompile
}

xmonad_recompile || error "Error recompiling Xmonad!"

xmonadctl_compile() {
    echo "####################################"
    echo "## Compiling the xmonadctl script ##"
    echo "####################################"
    ghc -dynamic "$HOME"/.xmonad/xmonadctl.hs
}

xmonadctl_compile || error "Error compiling the xmonadctl script!"

PS3='Set default user shell (enter number): '
shells=("fish" "bash" "zsh" "quit")
select choice in "${shells[@]}"; do
    case $choice in
    fish | bash | zsh)
        sudo chsh $USER -s "/bin/$choice" &&
            echo -e "$choice has been set as your default USER shell. \
                    \nLogging out is required for this take effect."
        break
        ;;
    quit)
        echo "User quit without changing shell."
        break
        ;;
    *)
        echo "invalid option $REPLY"
        ;;
    esac
done

# # Disable the current login manager
sudo systemctl disable $(grep '/usr/s\?bin' /etc/systemd/system/display-manager.service | awk -F / '{print $NF}') || echo "Cannot disable current display manager."
# Enable sddm as login manager
sudo systemctl enable sddm
echo "###################################"
echo "## Enable sddm as login manager. ##"
echo "###################################"

## Make multicolor-sddm-theme the default sddm theme ##
#  #This is the sddm system configuration file.
[ -f "/usr/lib/sddm/sddm.conf.d/default.conf" ] &&
    sudo cp /usr/lib/sddm/sddm.conf.d/default.conf /usr/lib/sddm/sddm.conf.d/default.conf.backup &&
    sudo sed -i 's/^Current=*.*/Current=multicolor-sddm-theme/g' /usr/lib/sddm/sddm.conf.d/default.conf

# This is the sddm local configuration file.
[ -f "/etc/sddm.conf" ] &&
    sudo cp /etc/sddm.conf /etc/sddm.conf.backup &&
    sudo sed -i 's/^Current=*.*/Current=multicolor-sddm-theme/g' /etc/sddm.conf

# # Create a local configuration file if it doesn't exist.
# # Standard Arch Linux does not create this file by default.
# [ ! -f "/etc/sddm.conf" ] && \
#     sudo cp /usr/lib/sddm/sddm.conf.d/default.conf /etc/sddm.conf || echo "Default sddm system config file is not found."

# # ArcoLinux B Awesome uses this config location.
# [ -f "/etc/sddm.conf.d/kde_settings.conf" ] && \
#     sudo cp /etc/sddm.conf.d/kde_settings.conf /etc/sddm.conf.d/kde_settings.backup && \
#     sudo sed -i 's/^Current=*.*/Current=multicolor-sddm-theme/g' /etc/sddm.conf.d/kde_settings.conf

# Enable virt manager
echo "###################################"
echo "## Enable Virt manager. ##"
echo "###################################"
sudo systemctl enable libvirtd.service
sudo systemctl start libvirtd.service
sudo usermod -a -G libvirt $USER

echo "##############################"
echo "## DEFOS has been installed! ##"
echo "##############################"

while true; do
    read -p "Do you want to reboot to get your DeFoS? [Y/n] " yn
    case $yn in
    [Yy]*) reboot ;;
    [Nn]*) break ;;
    "") reboot ;;
    *) echo "Please answer yes or no." ;;
    esac
done
